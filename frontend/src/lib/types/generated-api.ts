/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a new account */
        post: operations["AuthController_register"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Authenticate with email and password */
        post: operations["AuthController_login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Refresh authentication tokens */
        post: operations["AuthController_refresh"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Invalidate active refresh tokens */
        post: operations["AuthController_logout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List users */
        get: operations["UsersController_list"];
        put?: never;
        /** Create a user */
        post: operations["UsersController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get user by id */
        get: operations["UsersController_detail"];
        put?: never;
        post?: never;
        /** Delete a user */
        delete: operations["UsersController_remove"];
        options?: never;
        head?: never;
        /** Update a user */
        patch: operations["UsersController_update"];
        trace?: never;
    };
    "/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get current user profile */
        get: operations["MeController_profile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update current user profile */
        patch: operations["MeController_update"];
        trace?: never;
    };
    "/tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List tasks */
        get: operations["TasksController_list"];
        put?: never;
        /** Create a new task */
        post: operations["TasksController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tasks/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get task by id */
        get: operations["TasksController_detail"];
        put?: never;
        post?: never;
        /** Delete a task */
        delete: operations["TasksController_remove"];
        options?: never;
        head?: never;
        /** Update an existing task */
        patch: operations["TasksController_update"];
        trace?: never;
    };
    "/tasks/{id}/tags/{tagId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Assign a tag to a task */
        post: operations["TasksController_attachTag"];
        /** Remove a tag from a task */
        delete: operations["TasksController_detachTag"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tasks/{id}/comments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List comments for a task */
        get: operations["TasksController_comments"];
        put?: never;
        /** Create a comment on a task */
        post: operations["TasksController_addComment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tasks/{id}/subtasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a subtask */
        post: operations["TasksController_addSubtask"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/finance/accounts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List accounts */
        get: operations["FinanceController_listAccounts"];
        put?: never;
        /** Create an account */
        post: operations["FinanceController_createAccount"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/finance/accounts/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get account by id */
        get: operations["FinanceController_getAccount"];
        put?: never;
        post?: never;
        /** Delete an account */
        delete: operations["FinanceController_deleteAccount"];
        options?: never;
        head?: never;
        /** Update an account */
        patch: operations["FinanceController_updateAccount"];
        trace?: never;
    };
    "/finance/categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List categories */
        get: operations["FinanceController_listCategories"];
        put?: never;
        /** Create a category */
        post: operations["FinanceController_createCategory"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/finance/categories/tree": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get category tree */
        get: operations["FinanceController_categoryTree"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/finance/categories/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete a category */
        delete: operations["FinanceController_deleteCategory"];
        options?: never;
        head?: never;
        /** Update a category */
        patch: operations["FinanceController_updateCategory"];
        trace?: never;
    };
    "/finance/transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List transactions */
        get: operations["FinanceController_listTransactions"];
        put?: never;
        /** Create a transaction */
        post: operations["FinanceController_createTransaction"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/finance/transactions/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get transaction by id */
        get: operations["FinanceController_getTransaction"];
        put?: never;
        post?: never;
        /** Delete a transaction */
        delete: operations["FinanceController_deleteTransaction"];
        options?: never;
        head?: never;
        /** Update a transaction */
        patch: operations["FinanceController_updateTransaction"];
        trace?: never;
    };
    "/finance/budgets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List budgets */
        get: operations["FinanceController_listBudgets"];
        put?: never;
        /** Create a budget */
        post: operations["FinanceController_createBudget"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/finance/budgets/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get budget by id */
        get: operations["FinanceController_getBudget"];
        put?: never;
        post?: never;
        /** Delete a budget */
        delete: operations["FinanceController_deleteBudget"];
        options?: never;
        head?: never;
        /** Update a budget */
        patch: operations["FinanceController_updateBudget"];
        trace?: never;
    };
    "/reports/tasks/productivity": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get tasks productivity metrics */
        get: operations["ReportsController_tasksProductivity"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reports/finance/expenses-by-category": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get expenses grouped by category for a month */
        get: operations["ReportsController_financeExpensesByCategory"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reports/finance/monthly-series": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get finance monthly income/expense series */
        get: operations["ReportsController_financeMonthlySeries"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reports/finance/balance-by-account": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get current balances by account */
        get: operations["ReportsController_financeBalanceByAccount"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["AppController_health"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        RegisterDto: {
            /** @example new.user@example.com */
            email: string;
            /** @example StrongPassword1! */
            password: string;
            /** @example New User */
            name?: string;
        };
        AuthenticatedUserDto: {
            /** @example 1 */
            id: number;
            /** @example user@example.com */
            email: string;
            /** @example Jane Doe */
            name: string;
            /**
             * @example USER
             * @enum {string}
             */
            role: "USER" | "ADMIN";
            createdAt: string;
        };
        AuthResponseDto: {
            accessToken: string;
            refreshToken: string;
            user: components["schemas"]["AuthenticatedUserDto"];
        };
        LoginDto: {
            /** @example user@example.com */
            email: string;
            /** @example ChangeMe123! */
            password: string;
        };
        RefreshTokenDto: {
            /** @description Refresh token if not provided via Authorization header */
            refreshToken?: string;
        };
        CreateUserDto: {
            /** @example user@example.com */
            email: string;
            /** @example StrongPassword1! */
            password: string;
            /** @example Jane Doe */
            name: string;
            /**
             * @example USER
             * @enum {string}
             */
            role?: "USER" | "ADMIN";
        };
        UpdateUserDto: {
            /** @example user@example.com */
            email?: string;
            /** @example StrongPassword1! */
            password?: string;
            /** @example Jane Doe */
            name?: string;
            /**
             * @example USER
             * @enum {string}
             */
            role?: "USER" | "ADMIN";
        };
        UpdateMeDto: {
            /** @example Jane Doe */
            name?: string;
            /** @description New password */
            password?: string;
            /** @description Required when providing a new password */
            currentPassword?: string;
        };
        CreateTaskDto: {
            /** @example Review quarterly budget */
            title: string;
            /** @example Ensure all expense reports are collected */
            description?: string;
            /**
             * @default TODO
             * @enum {string}
             */
            status: "TODO" | "IN_PROGRESS" | "COMPLETED" | "ARCHIVED";
            /**
             * @default MEDIUM
             * @enum {string}
             */
            priority: "LOW" | "MEDIUM" | "HIGH" | "URGENT";
            /** Format: date-time */
            dueDate?: string;
            /** @description RFC5545 RRULE definition for repeating tasks */
            repeatRRule?: string;
            /** @example [
             *       "finance",
             *       "reporting"
             *     ] */
            tagNames?: string[];
            /** @description Parent task identifier for subtasks */
            parentId?: number;
        };
        UpdateTaskDto: {
            /** @example Review quarterly budget */
            title?: string;
            /** @example Ensure all expense reports are collected */
            description?: string;
            /** @enum {string} */
            status?: "TODO" | "IN_PROGRESS" | "COMPLETED" | "ARCHIVED";
            /** @enum {string} */
            priority?: "LOW" | "MEDIUM" | "HIGH" | "URGENT";
            /** Format: date-time */
            dueDate?: string;
            /** @description RFC5545 RRULE definition for repeating tasks */
            repeatRRule?: Record<string, never>;
            /** @example [
             *       "finance",
             *       "reporting"
             *     ] */
            tagNames?: string[];
            /** @description Parent task identifier or null to detach */
            parentId?: Record<string, never> | null;
        };
        CreateCommentDto: {
            /** @example Let us sync before Friday. */
            text: string;
        };
        CreateAccountDto: {
            /** @example Main Checking */
            name: string;
            /**
             * @description Account type label
             * @example checking
             */
            type: string;
            /** @example 1000.5 */
            initialBalance?: number;
        };
        UpdateAccountDto: {
            /** @example Main Checking */
            name?: string;
            /**
             * @description Account type label
             * @example checking
             */
            type?: string;
            /** @example 1500.75 */
            initialBalance?: number;
        };
        CreateCategoryDto: {
            /** @example Utilities */
            name: string;
            /** @description Parent category id */
            parentId?: Record<string, never>;
        };
        UpdateCategoryDto: {
            /** @example Utilities */
            name?: string;
            /** @description Parent category id */
            parentId?: Record<string, never> | null;
        };
        CreateTransactionDto: {
            /** @enum {string} */
            type: "INCOME" | "EXPENSE" | "TRANSFER";
            /**
             * @description Account identifier
             * @example 1
             */
            accountId: number;
            /**
             * @description Target account for transfers
             * @example 2
             */
            targetAccountId?: number;
            /**
             * @description Category identifier
             * @example 1
             */
            categoryId?: number;
            /** @example 125.75 */
            amount: number;
            /** Format: date-time */
            occurredAt: string;
            notes?: string;
            /** @example [
             *       "groceries",
             *       "family"
             *     ] */
            tags?: string[];
            /** @example https://example.com/receipt.pdf */
            attachmentUrl?: string;
            /** @example 12 */
            installmentsTotal?: number;
            /** @example 1 */
            installmentNumber?: number;
            /** @description RFC5545 RRULE for recurring transactions */
            recurrenceRRule?: string;
        };
        UpdateTransactionDto: {
            /** @enum {string} */
            type?: "INCOME" | "EXPENSE" | "TRANSFER";
            /**
             * @description Account identifier
             * @example 1
             */
            accountId?: number;
            /**
             * @description Target account for transfers
             * @example 2
             */
            targetAccountId?: number;
            /**
             * @description Category identifier
             * @example 1
             */
            categoryId?: number;
            /** @example 300.25 */
            amount?: number;
            /** Format: date-time */
            occurredAt?: string;
            notes?: string;
            /** @example [
             *       "groceries",
             *       "family"
             *     ] */
            tags?: string[];
            /** @example https://example.com/receipt.pdf */
            attachmentUrl?: string;
            /** @example 12 */
            installmentsTotal?: number;
            /** @example 1 */
            installmentNumber?: number;
            /** @description RFC5545 RRULE for recurring transactions */
            recurrenceRRule?: string;
        };
        CreateBudgetDto: {
            /** @example 1 */
            categoryId: number;
            /** @example 2025 */
            year: number;
            /** @example 3 */
            month: number;
            /** @example 1500 */
            plannedAmount: number;
        };
        UpdateBudgetDto: {
            /** @example 1 */
            categoryId?: number;
            /** @example 2025 */
            year?: number;
            /** @example 5 */
            month?: number;
            /** @example 1600 */
            plannedAmount?: number;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    AuthController_register: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RegisterDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthResponseDto"];
                };
            };
        };
    };
    AuthController_login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthResponseDto"];
                };
            };
        };
    };
    AuthController_refresh: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RefreshTokenDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthResponseDto"];
                };
            };
        };
    };
    AuthController_logout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_list: {
        parameters: {
            query?: {
                /** @description Free text search by name or email */
                search?: string;
                role?: "USER" | "ADMIN";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a paginated list of users. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateUserDto"];
            };
        };
        responses: {
            /** @description User created successfully. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_detail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description User identifier */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a single user. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description User identifier */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User deleted successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description User identifier */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateUserDto"];
            };
        };
        responses: {
            /** @description User updated successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MeController_profile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the authenticated user profile. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MeController_update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateMeDto"];
            };
        };
        responses: {
            /** @description Returns the updated profile. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TasksController_list: {
        parameters: {
            query?: {
                status?: ("TODO" | "IN_PROGRESS" | "COMPLETED" | "ARCHIVED")[];
                priority?: ("LOW" | "MEDIUM" | "HIGH" | "URGENT")[];
                dueFrom?: string;
                dueTo?: string;
                /** @description Filter by a single tag name */
                tag?: string;
                /** @description Filter by one or more tag names */
                tags?: string[];
                /** @description Full text search on title or description */
                q?: string;
                /** @description Include subtasks in top-level listing */
                includeSubtasks?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a paginated list of tasks that match the provided filters. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TasksController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateTaskDto"];
            };
        };
        responses: {
            /** @description Task created successfully. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TasksController_detail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Task identifier */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a single task. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TasksController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Task identifier */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Task deleted successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TasksController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Task identifier */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateTaskDto"];
            };
        };
        responses: {
            /** @description Task updated successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TasksController_attachTag: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Task identifier */
                id: number;
                /** @description Tag identifier */
                tagId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Updated task with the tag attached. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TasksController_detachTag: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Task identifier */
                id: number;
                /** @description Tag identifier */
                tagId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Updated task with the tag removed. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TasksController_comments: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Task identifier */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns comments for the given task. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TasksController_addComment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Task identifier */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCommentDto"];
            };
        };
        responses: {
            /** @description Comment created successfully. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TasksController_addSubtask: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Parent task identifier */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateTaskDto"];
            };
        };
        responses: {
            /** @description Subtask created successfully. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    FinanceController_listAccounts: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns all accounts for the authenticated user. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    FinanceController_createAccount: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateAccountDto"];
            };
        };
        responses: {
            /** @description Account created successfully. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    FinanceController_getAccount: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Account identifier */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the requested account. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    FinanceController_deleteAccount: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Account identifier */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Account deleted successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    FinanceController_updateAccount: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Account identifier */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateAccountDto"];
            };
        };
        responses: {
            /** @description Account updated successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    FinanceController_listCategories: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns all categories for the authenticated user. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    FinanceController_createCategory: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCategoryDto"];
            };
        };
        responses: {
            /** @description Category created successfully. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    FinanceController_categoryTree: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns categories organised as a hierarchy. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    FinanceController_deleteCategory: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Category identifier */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Category deleted successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    FinanceController_updateCategory: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Category identifier */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateCategoryDto"];
            };
        };
        responses: {
            /** @description Category updated successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    FinanceController_listTransactions: {
        parameters: {
            query?: {
                type?: ("INCOME" | "EXPENSE" | "TRANSFER")[];
                accountId?: number;
                categoryId?: number;
                /** @description ISO date-time; accepts dateFrom or from query param */
                dateFrom?: string;
                /** @description ISO date-time; accepts dateTo or to query param */
                dateTo?: string;
                minAmount?: number;
                maxAmount?: number;
                tags?: string[];
                /** @description Full text search by notes, attachments, or related names */
                q?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a paginated list of transactions. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    FinanceController_createTransaction: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateTransactionDto"];
            };
        };
        responses: {
            /** @description Transaction created successfully. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    FinanceController_getTransaction: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Transaction identifier */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the requested transaction. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    FinanceController_deleteTransaction: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Transaction identifier */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Transaction deleted successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    FinanceController_updateTransaction: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Transaction identifier */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateTransactionDto"];
            };
        };
        responses: {
            /** @description Transaction updated successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    FinanceController_listBudgets: {
        parameters: {
            query?: {
                year?: number;
                month?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns budgets for the authenticated user. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    FinanceController_createBudget: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateBudgetDto"];
            };
        };
        responses: {
            /** @description Budget created successfully. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    FinanceController_getBudget: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Budget identifier */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the requested budget. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    FinanceController_deleteBudget: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Budget identifier */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Budget deleted successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    FinanceController_updateBudget: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Budget identifier */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateBudgetDto"];
            };
        };
        responses: {
            /** @description Budget updated successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ReportsController_tasksProductivity: {
        parameters: {
            query?: {
                from?: string;
                to?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns completed tasks per day and the average lead time for the requested period. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ReportsController_financeExpensesByCategory: {
        parameters: {
            query: {
                /** @description Month number (1-12) */
                month: number;
                /** @description Year (e.g. 2025) */
                year: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns expenses aggregated by category for the selected month. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ReportsController_financeMonthlySeries: {
        parameters: {
            query: {
                /** @description Start month (1-12) */
                fromMonth: number;
                /** @description Start year */
                fromYear: number;
                /** @description End month (1-12) */
                toMonth: number;
                /** @description End year */
                toYear: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns monthly income, expense, and net totals for the requested range. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ReportsController_financeBalanceByAccount: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns balances and transfer-aware totals for each account. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AppController_health: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
